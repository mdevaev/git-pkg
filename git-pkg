#!/bin/bash
#
# Git command for build package in chroot
#  by Devaev Maxim <mdevaev@gmail.com> (c) 2011 v0.1
#
#####


USAGE='[-d=system|--dest=system] [-f|--force] [--fake] [changelog|build]'

. git-sh-setup
. git-pkg-deb


##### Common functions #####
check_version() {
    local version_tag_pattern=`echo "$PKG_TAG_FORMAT" \
        | sed -e "s/%t/$PKG_TYPE/g" \
        | sed -e "s/%v/.*/g" \
        | sed -e "s/%a/$PKG_ARCH/g" \
        | sed -e "s/%n/$PKG_DEST/g" \
        | sed -e "s/%m/$PKG_META/g"`
    local last_tag=`git tag | grep "$version_tag_pattern" | sort -r | head -n 1`
    local new_tag="$1"

    [ -z "$last_tag" ] || local last_tag_commit=`git show --no-notes --format=format:%H "$last_tag" | head -n 1`
    local head_commit=`git show --no-notes --format=format:%H HEAD | head -n 1`

    if [ "$last_tag_commit" != "$head_commit" -o -z "$last_tag" ]; then
        if [ "$last_tag" == "$new_tag" ]; then
            die "To build you must specify a new package version/release"
        else
            say "New build tag: $new_tag"
        fi
    else
        die "Last build in tag \"$last_tag\", HEAD not updated"
    fi
}

set_version() {
    git tag "$1"
}


##### Actions #####
changelog() {
    local version_tag_pattern=`echo "$PKG_TAG_FORMAT" \
        | sed -e "s/%t/$PKG_TYPE/g" \
        | sed -e "s/%v/.*/g" \
        | sed -e "s/%a/$PKG_ARCH/g" \
        | sed -e "s/%n/$PKG_DEST/g" \
        | sed -e "s/%m/$PKG_META/g"`
    local last_tag=`git tag | grep "$version_tag_pattern" | sort -r | head -n 1`

    if [ -n "$last_tag" ]; then
        git log --format="format:%s" "$last_tag"..HEAD | uniq | ${PKG_TYPE}_update_changelog
    else
        echo "Initial build" | ${PKG_TYPE}_update_changelog
    fi
    ${PKG_TYPE}_edit_changelog
}


build() {
    local version_tag=`echo "$PKG_TAG_FORMAT" \
        | sed -e "s/%t/$PKG_TYPE/g" \
        | sed -e "s/%v/\`${PKG_TYPE}_last_version\`/g" \
        | sed -e "s/%a/$PKG_ARCH/g" \
        | sed -e "s/%n/$PKG_DEST/g" \
        | sed -e "s/%m/$PKG_META/g"`

    [ -n "$OPT_FORCE_BUILD" ] || check_version "$version_tag"

    if [ -z "$OPT_FAKE_BUILD" ]; then
        ${PKG_TYPE}_build_prepare || die "  --- Build prepare error ---"
        ${PKG_TYPE}_build || die "  --- Build error ---"
        ${PKG_TYPE}_build_clean  || die "  --- Build clean error ---"
    else
        say "Fake build"
    fi

    [ -n "$OPT_FORCE_BUILD" ] || set_version "$version_tag"
}


system_info() {
    say
    say "  --- Git-pkg values ---"
    say "  Destination   $PKG_DEST"
    say "  Chroot        $PKG_SCHROOT"
    say "  Type          $PKG_TYPE"
    say "  Arch          $PKG_ARCH"
    say "  Distr         $PKG_META"
    if [ -n "$PKG_SCHROOT" ]; then
        schroot -p -c "$PKG_SCHROOT" -- /bin/true && say "  Schroot test  OK" || die "  Schroot test FAIL"
        say
        schroot -i "$PKG_SCHROOT"
    fi
    say
}


##### Check configuration #####
check_config() {
    PKG_SCHROOT=`git config pkg."$PKG_DEST".schroot`
    PKG_TYPE=`git config pkg."$PKG_DEST".type`
    PKG_ARCH=`git config pkg."$PKG_DEST".arch || arch`
    PKG_META=`git config pkg."$PKG_DEST".meta`
    PKG_TAG_FORMAT=`git config pkg.tag-format || echo "pkg-%t-%n-%v-%a"`

    EDITOR=`git config core.editor || echo "$EDITOR"`
    FULLNAME=`git config user.name`
    EMAIL=`git config user.email`

    for var in PKG_TYPE PKG_ARCH EDITOR FULLNAME EMAIL; do
        [ -n "`eval echo \\$"$var"`" ] || die "Variable \$$var is not defined"
    done

    [ -n "`eval echo \\$PKG_TYPE_"$PKG_TYPE"`" ] || die "Unknown type \"$PKG_TYPE\" in pkg.$PKG_DEST.type"
    which schroot >/dev/null 2>&1 || die "Bin \"schroot\" is not found"
    [ -n "$PKG_SCHROOT" ] && ( [ -n "`schroot -l | grep "^chroot:$PKG_SCHROOT$"`" ] || die "Unknown chroot \"$PKG_SCHROOT\"" )

    ${PKG_TYPE}_check_config
}


##### Main #####
while test $# != "0"; do
    case "$1" in
        -d|--dest*)
            case "$#,$1" in
                *,*=*) PKG_DEST=`expr "z$1" : 'z-[^=]*=\(.*\)'`;;
                1,*) usage;;
                *) PKG_DEST="$2"; shift;;
            esac;;
        -f|--force) OPT_FORCE_BUILD="1";;
        --fake) OPT_FAKE_BUILD="1";;
        --) break;;
        -*) usage;;
        *) break;;
    esac
    shift
done
[ -n "$PKG_DEST" ] || PKG_DEST=`git config pkg.default`
[ -n "$PKG_DEST" ] || die "Please, specify a destination"

case "$1" in
    c|changelog) check_config; changelog;;
    b|build) check_config; build;;
    i|info) check_config; system_info;;
    *) check_config;;
esac

