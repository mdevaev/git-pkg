#!/bin/bash
#
# Git command for build package in chroot
#  by Devaev Maxim <mdevaev@gmail.com> (c) 2011 v0.1
#
#####


USAGE='[-d=system|--dest=system] [-f|--force] [--fake] [changelog|build|info|log]'


source git-sh-setup
source git-pkg-arch
source git-pkg-deb


##### Formatting #####
paint() {
	# For first argument, see man 4 console_codes
	[ -n "$USE_COLORS" ] && echo -en "\e[1;$1m$2\e[0m" || echo -en "$2"
}


##### Common functions #####
check_version() {
	local version_tag_pattern=`echo "$PKG_TAG_FORMAT" \
		| sed -e "s/%t/$PKG_TYPE/g" \
		| sed -e "s/%v/.*/g" \
		| sed -e "s/%a/$PKG_ARCH/g" \
		| sed -e "s/%n/$PKG_DEST/g" \
		| sed -e "s/%m/$PKG_META/g"`
	local last_tag=`git tag | grep "$version_tag_pattern" | sort -r | head -n 1`
	local new_tag="$1"

	[ -z "$last_tag" ] || local last_tag_commit=`git show --no-notes --format=format:%H "$last_tag" | head -n 1`
	local head_commit=`git show --no-notes --format=format:%H HEAD | head -n 1`

	if [ "$last_tag_commit" != "$head_commit" -o -z "$last_tag" ]; then
		if [ "$last_tag" == "$new_tag" ]; then
			die "To build you must specify a new package version/release"
		else
			echo "New build tag: $new_tag"
		fi
	else
		die "Last build in tag \"$last_tag\", HEAD not updated"
	fi
}

set_version() {
	git tag "$1"
}


##### Actions #####
changelog() {
	local version_tag_pattern=`echo "$PKG_TAG_FORMAT" \
		| sed -e "s/%t/$PKG_TYPE/g" \
		| sed -e "s/%v/.*/g" \
		| sed -e "s/%a/$PKG_ARCH/g" \
		| sed -e "s/%n/$PKG_DEST/g" \
		| sed -e "s/%m/$PKG_META/g"`
	local last_tag=`git tag | grep "$version_tag_pattern" | sort -r | head -n 1`

	if [ -n "$last_tag" ]; then
		local comments=`git log --format="format:%s" "$last_tag"..HEAD | uniq`
		[ -n "$comments" ] && echo -e "$comments" | ${PKG_TYPE}_update_changelog || die "No fresh commits"
	else
		echo "Initial build" | ${PKG_TYPE}_update_changelog
	fi
	${PKG_TYPE}_edit_changelog
}


build() {
	local version_tag=`echo "$PKG_TAG_FORMAT" \
		| sed -e "s/%t/$PKG_TYPE/g" \
		| sed -e "s/%v/\`${PKG_TYPE}_last_version\`/g" \
		| sed -e "s/%a/$PKG_ARCH/g" \
		| sed -e "s/%n/$PKG_DEST/g" \
		| sed -e "s/%m/$PKG_META/g"`

	[ -n "$OPT_FORCE_BUILD" ] || check_version "$version_tag"

	if [ -z "$OPT_FAKE_BUILD" ]; then
		${PKG_TYPE}_build_prepare || die "  --- Build prepare error ---"
		${PKG_TYPE}_build || die "  --- Build error ---"
		${PKG_TYPE}_build_clean  || die "  --- Build clean error ---"
	else
		echo "Fake build"
	fi

	[ -n "$OPT_FORCE_BUILD" ] || set_version "$version_tag"
}


system_info() {
	echo -e "\n  --- Git-pkg values ---"
	echo "  Destination   $PKG_DEST"
	echo "  Chroot        $PKG_SCHROOT"
	echo "  Type          $PKG_TYPE"
	echo "  Arch          $PKG_ARCH"
	echo "  Distr         $PKG_META"
	if [ -n "$PKG_SCHROOT" ]; then
		schroot -p -c "$PKG_SCHROOT" -- /bin/true && echo "  Schroot test  OK" || die "  Schroot test FAIL"
		echo
		schroot -i "$PKG_SCHROOT"
	fi
	echo
}

builds_log() {
	local version_tag_pattern=`echo "$PKG_TAG_FORMAT" \
		| sed -e "s/%t/$PKG_TYPE/g" \
		| sed -e "s/%a/$PKG_ARCH/g" \
		| sed -e "s/%n/$PKG_DEST/g" \
		| sed -e "s/%[vm]/.*/g" `

	say "# Builds log for $PKG_DEST/$PKG_TYPE ($PKG_ARCH)"
	say "#   `paint 32 '*'` -- Your builds"
	say "#   `paint 31 '~'` -- Other builds"
	say

	for tag in `git tag | grep "$version_tag_pattern" | sort -r`; do
		local author=`git show --no-notes --format=format:%an $tag | head -n 1`
		[ "$author" == "$FULLNAME" ] && echo "`paint 32 '*'` $tag" || echo "`paint 31 '~'` $tag"
	done
}


extension() {
	local extension="$1"
	shift

	for command in `eval echo \\$PKG_EXTENSIONS_"${PKG_TYPE}"`; do
		[ "$extension" != "$command" ] || local command_exists_flag="1"
	done
	[ -n "$command_exists_flag" ] || die "Unknown command or extension \"$extension\""

	${PKG_TYPE}_$extension $@
}


##### Check configuration #####
init_config() {
	PKG_SCHROOT=`git config pkg."$PKG_DEST".schroot`
	PKG_TYPE=`git config pkg."$PKG_DEST".type`
	PKG_ARCH=`git config pkg."$PKG_DEST".arch || arch`
	PKG_META=`git config pkg."$PKG_DEST".meta`
	PKG_TAG_FORMAT=`git config pkg.tag-format || echo "pkg-%t-%n-%v-%a"`

	EDITOR=`git config core.editor || echo "$EDITOR"`
	FULLNAME=`git config user.name`
	EMAIL=`git config user.email`

	USE_COLORS=`[ "\`git config color.status\`" == "no" ] || echo "1"` # FIXME: Auto = yes

	for var in PKG_TYPE PKG_ARCH EDITOR FULLNAME EMAIL; do
		[ -n "`eval echo \\$"$var"`" ] || die "Variable \$$var is not defined"
	done

	[ -n "`eval echo \\$PKG_TYPE_"$PKG_TYPE"`" ] || die "Unknown type \"$PKG_TYPE\" in pkg.$PKG_DEST.type"
	[ -n "$PKG_SCHROOT" ] && ( which schroot >/dev/null 2>&1 || die "Bin \"schroot\" is not found" )
	[ -n "$PKG_SCHROOT" ] && ( [ -n "`schroot -l | grep "^chroot:$PKG_SCHROOT$"`" ] || die "Unknown chroot \"$PKG_SCHROOT\"" )

	${PKG_TYPE}_init_config
}


##### Main #####
while test $# != "0"; do
	case "$1" in
		-d|--dest*)
			case "$#,$1" in
				*,*=*) PKG_DEST=`expr "z$1" : 'z-[^=]*=\(.*\)'`;;
				1,*) usage;;
				*) PKG_DEST="$2"; shift;;
			esac;;
		-f|--force) OPT_FORCE_BUILD="1";;
		--fake) OPT_FAKE_BUILD="1";;
		--) break;;
		-*) usage;;
		*) break;;
	esac
	shift
done
[ -n "$PKG_DEST" ] || PKG_DEST=`git config pkg.default`
[ -n "$PKG_DEST" ] || die "Please, specify a destination"

case "$1" in
	c|changelog) init_config; changelog;;
	b|build) init_config; build;;
	i|info) init_config; system_info;;
	l|log) init_config; builds_log;;
	"") usage;;
	*) init_config; extension $@;;
esac

